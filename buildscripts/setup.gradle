def renameConfig = [
        templateName  : "template",
        templateAppId : "template.app.id",
        newPackage    : "domain.yourname.app",
        newProjectName: "Your Project",
        useMviModule  : true,
]

task renameAppPackage(type: Copy) {
    description "Renames the template package in the app module."
    group null

    def newPackageAsDirectory = renameConfig.newPackage.replaceAll("\\.", "/")
    def startingDirectory = "${rootDir}/app/src/main/java/${renameConfig.templateName}"
    def endingDirectory = "${rootDir}/app/src/main/java/${newPackageAsDirectory}"

    def startingPackage = renameConfig.templateName
    def endingPackage = renameConfig.newPackage

    from(startingDirectory)
    into(endingDirectory)

    // Replace package statements
    filter { line ->
        line.replaceAll(
                "package ${startingPackage}",
                "package ${endingPackage}"
        )
    }

    // Replace import statements
    filter { line ->
        line.replaceAll(
                "import ${startingPackage}",
                "import ${endingPackage}"
        )
    }

    doLast {
        delete(startingDirectory)

        ("git add $endingDirectory").execute()
    }
}

task renameMviPackage(type: Copy) {
    description "Renames the template package in the mvi module."
    group null

    def newPackageAsDirectory = renameConfig.newPackage.replaceAll("\\.", "/")
    def startingDirectory = "${rootDir}/mvi/src/main/java/${renameConfig.templateName}/mvi"
    def endingDirectory = "${rootDir}/mvi/src/main/java/${newPackageAsDirectory}/mvi"

    def startingPackage = "${renameConfig.templateName}.mvi"
    def endingPackage = "${renameConfig.newPackage}.mvi"

    from(startingDirectory)
    into(endingDirectory)

    // Replace package statements
    filter { line ->
        line.replaceAll(
                "package $startingPackage",
                "package $endingPackage"
        )
    }

    // Replace import statements
    filter { line ->
        line.replaceAll(
                "import $startingPackage",
                "import $endingPackage"
        )
    }

    doLast {
        delete("${rootDir}/mvi/src/main/java/${renameConfig.templateName}")

        ("git add $endingDirectory").execute()
    }
}

task deleteMviModule {
    description "Deletes MVI module and removes from settings.gradle.kts"
    group null

    doLast {
        delete("${rootDir}/mvi")

        def settingsFile = new File("${rootDir}/settings.gradle.kts")
        List settingsLines = settingsFile.readLines()
        settingsFile.text = ""
        settingsLines.each { line ->
            if (!line.contains("include\\(\":mvi\"\\)")) {
                settingsFile.append(line)
                settingsFile.append("\n")
            }
        }

        def appGradleFile = new File("${rootDir}/app/build.gradle.kts")
        List appGradleLines = settingsFile.readLines()
        appGradleFile.text = ""
        appGradleLines.each { line ->
            if (!line.contains("implementation\\(project\\(\":mvi\"\\)\\)")) {
                appGradleFile.append(line)
                appGradleFile.append("\n")
            }
        }
    }
}

task renameOrRemoveMviModule {
    if (renameConfig.useMviModule) {
        dependsOn(renameMviPackage)
    } else {
        dependsOn(deleteMviModule)
    }
}

task replacePackageInManifest {
    description "Replaces references to template in AndroidManifest.xml file."
    group null

    doLast {
        def file = new File("${rootDir}/app/src/main/AndroidManifest.xml")

        // Replace package
        file.text = file.text.replaceAll(
                "package=\"${renameConfig.templateName}\"",
                "package=\"${renameConfig.newPackage}\"",
        )

        // Replace MainActivity reference
        file.text = file.text.replaceAll(
                "${renameConfig.templateName}.MainActivity",
                "${renameConfig.newPackage}.MainActivity",
        )
    }
}

task replaceApplicationId {
    description "Replaces application ID in app/build.gradle.kts file."
    group null

    doLast {
        def file = new File("${rootDir}/app/build.gradle.kts")

        file.text = file.text.replaceAll(
                "applicationId = \"${renameConfig.templateAppId}\"",
                "applicationId = \"${renameConfig.newPackage}\"",
        )
    }
}

task replaceProjectName {
    description "Replaces project name in settings.gradle.kts file."
    group null

    doLast {
        def file = new File("${rootDir}/settings.gradle.kts")

        file.text = file.text.replaceAll(
                "rootProject.name = \"${renameConfig.templateName}\"",
                "rootProject.name = \"${renameConfig.newProjectName}\"",
        )
    }
}

task replaceAppName {
    description "Replaces app name in strings.xml file."
    group null

    doLast {
        def file = new File("${rootDir}/app/src/main/res/values/strings.xml")

        file.text = file.text.replaceAll(
                "<string name=\"app_name\">${renameConfig.templateName}</string>",
                "<string name=\"app_name\">${renameConfig.newProjectName}</string>",
        )
    }
}

task renameTemplate {
    description "Runs all of the necessary template setup tasks based on the renameConfig."
    group "Template Setup"

    dependsOn(
            renameAppPackage,
            replacePackageInManifest,
            replaceApplicationId,
            replaceProjectName,
            replaceAppName,
            renameOrRemoveMviModule,
    )
}
